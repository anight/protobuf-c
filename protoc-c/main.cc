#include <google/protobuf/compiler/command_line_interface.h>
#include <protoc-c/c_generator.h>

#include <stdio.h>
#include <string.h>

int main(int argc, char* argv[]) {
  google::protobuf::compiler::CommandLineInterface cli;
  cli.AllowPlugins("protoc-c-");

  // Support generation of Foo code.
  google::protobuf::compiler::c::CGenerator c_generator;
  cli.RegisterGenerator("--c_out", &c_generator,
  "Generate C/H files.");

  // Add version info generated by automake
  cli.SetVersionInfo(PACKAGE_STRING);

  // XXX: Ugly temporary hack
  // Add --plugin= and --c-fast_out= args to force use of c-fast plugin
  char **new_argv = argv;
  int pos = 0;
  int i;
  char *out_dir = 0;
  for (i = 1; i < argc; i++) {
    if (!strncmp(argv[i], "--plugin=protoc-c-gen-c-fast=", 29)) {
      /* the plugin was specified in argv: turn off magic */
      break;
    }
    if (!strncmp(argv[i], "--c_out=", 8)) {
      char *colon = strchr(argv[i], ':');
      if (colon) {
        out_dir = colon + 1;
      } else {
        out_dir = argv[i] + 8;
      }
      pos = i + 1;
      break;
    }
  }

  if (out_dir) {
    new_argv = (char **) malloc(sizeof(char *) * (argc + 2));
    memcpy(new_argv, argv, pos * sizeof(char *));
    asprintf(new_argv + pos, "--plugin=protoc-c-gen-c-fast=%s/bin/protoc-c-gen-c-fast", PROGRAM_PREFIX);
    asprintf(new_argv + pos + 1, "--c-fast_out=%s", out_dir);
    memcpy(new_argv + pos + 2, argv + pos, (argc - pos) * sizeof(char *));
    argc += 2;
  }

  return cli.Run(argc, new_argv);
}
